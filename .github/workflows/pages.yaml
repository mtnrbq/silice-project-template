name: programming
description: 'Creates a page for programming your FPGA'
on: [workflow_call]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  make-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Download bitstream artifact
        uses: actions/download-artifact@v4
        with:
          name: bitstream
          path: gh-pages

      - name: Download openFPGALoader-online
        shell: bash
        run: |
          echo "downloading ..."
          wget -c https://github.com/sylefeb/openFPGALoader-online/releases/download/bucket-linux-x64/release.tgz
          echo "decompressing ..."
          tar xvfz release.tgz
          cp release/* gh-pages/

      - name: Generate HTML page
        shell: bash
        run: |
          cat << EOF >> gh-pages/index.html
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <title>FPGA programming page</title>
            </head>
            <body>
            <button id="selectAndProgramDevice">Select your FPGA device</button>
            <p id="txtfield"></p>
            <script>
            var txtfield = document.getElementById("txtfield");
            var Module = {
                    preRun: [function() {  }],
                    'print': function(text)    { txtfield.textContent += text; console.log(':: ' + text) },
                    'printErr': function(text) { txtfield.textContent += text; console.log(':: ' + text) }
            }
            Module['onRuntimeInitialized'] = function() {
              // download file
              var xhr = new XMLHttpRequest();
              xhr.open("GET", "bitstream");
              xhr.responseType = "arraybuffer";
              xhr.overrideMimeType("application/octet-stream");
              xhr.onload = function () {
                if (this.status === 200) {
                  FS.writeFile('/bitstream.bit', new Uint8Array(xhr.response), { encoding: "binary" });
                  console.log("bitstream loaded")
                }
              };
              xhr.send();
            }
            function assert() {}
            </script>
            <script src=openFPGALoader.js></script>
            <script>
                // Request access to a USB device
                document.getElementById('selectAndProgramDevice').addEventListener('click', async () => {
                  try {
                    const device = await navigator.usb.requestDevice({ filters: [] });
                    console.log(`Selected device: ${device.productName}`);
                    Module.callMain(['-b','ulx3s','/bitstream.bit'])
                  } catch (err) {
                    console.error(`Error: ${err}`);
                  }
                });
            </script>
            </body>
            </html>
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-pages'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Check for failure
        if: failure()
        shell: bash
        run: |
          echo "Failed to deploy to GitHub Pages, please follow the link to troubleshoot: https://tinytapeout.com/faq/#my-github-action-is-failing-on-the-pages-part"

          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Error
          Failed to deploy to GitHub Pages. [Click here for instructions how to fix](https://tinytapeout.com/faq/#my-github-action-is-failing-on-the-pages-part).
          EOF

          exit 1

      - name: Link in workflow summary
        shell: bash
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          PAGE_URL=$(echo "$PAGE_URL" | sed -e 's/\/$//')
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Test your design
          [Go to the online FPGA configuration page]($PAGE_URL/index.html) (Requires WebUSB support, for instance Chrome or Edge).
          EOF
